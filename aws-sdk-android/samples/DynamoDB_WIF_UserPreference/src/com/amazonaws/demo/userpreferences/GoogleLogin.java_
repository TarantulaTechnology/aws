/*
 * Copyright 2010-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 * 
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
package com.amazonaws.demo.userpreferences;

import java.io.IOException;

import com.google.android.gms.auth.GoogleAuthException;
import com.google.android.gms.auth.GoogleAuthUtil;
import com.google.android.gms.auth.GooglePlayServicesAvailabilityException;
import com.google.android.gms.auth.UserRecoverableAuthException;
import android.accounts.Account;
import android.accounts.AccountManager;
import android.app.Activity;
import android.content.Context;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;


public class GoogleLogin extends AlertActivity {

    private static final String LOG_TAG = "GOOGLE_LOGIN";
    private static final int GOOGLE_CODE = 7000;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        Log.d(LOG_TAG, "onCreate");
        getAndUseAuthTokenInAsyncTask();
    }

    void getAndUseAuthTokenBlocking() {
        try {
            AccountManager am = AccountManager.get(this);
            Log.d(LOG_TAG, "got AM");
            Account[] accounts = am.getAccountsByType(GoogleAuthUtil.GOOGLE_ACCOUNT_TYPE);
            Log.d(LOG_TAG, "Found " + accounts.length + " accounts");
            Log.d(LOG_TAG, "Using " + accounts[0].name);

            String token = GoogleAuthUtil.getToken(getApplicationContext(), accounts[0].name, "audience:server:client_id:" + UserPreferenceDemoActivity.clientManager.getGoogleClientID() );
            UserPreferenceDemoActivity.clientManager.login(new GoogleIDP(getApplicationContext(), token));

            runOnUiThread(new Runnable() {
                public void run() {
                    setResult(Activity.RESULT_OK, null);
                    finish();  
                }
            });
        } catch (GooglePlayServicesAvailabilityException playEx) {
            Log.e(LOG_TAG, "Error logging in: " + playEx);
        	runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    setResult(Activity.RESULT_CANCELED, null);
                    finish();  
                }
        	});
        } catch (UserRecoverableAuthException userAuthEx) {
            // Start the user recoverable action using the intent returned by
            // getIntent()
            startActivityForResult(
                    userAuthEx.getIntent(),
                    GOOGLE_CODE);
            return;
        } catch (IOException transientEx) {
            // network or server error, the call is expected to succeed if you try again later.
            // Don't attempt to call again immediately - the request is likely to
            // fail, you'll hit quotas or back-off.
            return;
        } catch (GoogleAuthException authEx) {
            // Failure. The call is not expected to ever succeed so it should not be
            // retried.
            Log.e("GOOGLE_LOGIN", "Failed auth: " + authEx);
            return;
        }
    }

    void getAndUseAuthTokenInAsyncTask() {
        AsyncTask<Void,Void,Void> task = new AsyncTask<Void,Void,Void>() {
            @Override
            protected Void doInBackground(Void... params) {
                getAndUseAuthTokenBlocking();
                return null;
            }
        };
        task.execute((Void)null);
    }

    protected class GoogleIDP implements WIFIdentityProvider {
        private Context googleContext;
        private String googleToken;

        public GoogleIDP(Context context, String token) {
            googleContext = context;
            googleToken = token;
        }

        @Override
        public String getToken() {
            return googleToken;
        }

        @Override
        public String getProviderID() {
            // google uses a null provider ID
            return null;
        }

        @Override
        public String getRoleARN() {
            return UserPreferenceDemoActivity.clientManager.getGoogleRoleARN();
        }

        @Override
        public void logout() {
            GoogleAuthUtil.invalidateToken(googleContext, googleToken);
        }

    }
}
